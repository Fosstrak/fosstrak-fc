       ------
                                    Users guide - A complete Example
                                    ------
                                    ------


Users guide - A complete Example

* Content
	
	[[1]] {{{#Objective}Objective}}
	
	[[2]] {{{#Prerequisites}Prerequisites}}
	
	[[3]] {{{#Tomcat}Tomcat preparations}}
	
	[[4]] {{{#Reader}Reader simulator and event sink preparations}}
	
	[[5]] {{{#Connect}Connect to the webclient}}

	[[6]] {{{#Set}Set the connection endpoint}}
	
	[[7]] {{{#Install}Install a logical reader}}
	
	[[8]] {{{#Define}Define an EventCycle}}
	
	[[9]] {{{#Subscribe}Subscribe an event sink}}
		
	

* {Objective}

	This tutorial will guide you through a complete example that:
	
	* prepares fc-server and fc-webclient
	
	* creates a logical reader
	
	* creates an event cycle
	
	* connects the event sink to the fc-server
	
	
* {Prerequisites}

   You need the following files ready at hand:
   
   * a copy of the fc-server. eg. fc-server-0.3.0-SNAPSHOT.war
   
   * a copy of the fc-webclient. eg. fc-webclient-0.3.0-SNAPSHOT.war
   
   * a copy of the reader protocol client. this package provides us with a 
   	graphical event sink for the event reports. eg. reader-client-0.3.1.jar
   
   * a copy of the rp reader simulator. eg. reader-rprm-core-0.4.0-SNAPSHOT.jar
   
   * an ECSpec. eg. {{{../files/ECSpec_current.xml}ECSpec_current.xml}}
   
   * a logical reader definition xml. eg {{{../files/HALReader.xml}HALReader.xml}} 
   	or {{{../files/RPReader.xml}RPReader.xml}}
   
   []
   
   We assume that you installed an instance of apache tomcat on the localhost



   
* {Tomcat} preparations
   
   Copy the two war files into the tomcat-webapps directory and start apache tomcat.
   Tomcat will automatically deploy the two war files for you.



   
* {Reader} simulator and event sink preparations

   To simplify this demo we use a software reader to generate tags. We therefore 
   need to start the rp reader simulator
   
+--------------+
java -jar <RPRM_CORE_VERSION>.jar

example:
java -jar reader-rprm-core-0.4.0-SNAPSHOT.jar
+--------------+

   To retrieve the reports from the EventCycle we start an graphical event sink.
   Make sure the provided port is not used by some other application.

+--------------+
java -cp <READER_RP_CLIENT_VERSION>.jar \ 
	org.fosstrak.reader.rp.client.EventSinkUI <PORT>

example:
java -cp reader-rp-client-0.3.1.jar \ 
	org.fosstrak.reader.rp.client.EventSinkUI 9999
+--------------+




* {Connect} to the webclient

  Now it's time to run Fosstrak filtering and collection. Start your favorite 
  webbrowser and point it to the address of the Fosstrak webclient.
  
+--------------+
http://<SERVER>:<PORT>/<WEBCLIENT_VERSION>/services/ALEWebClient.jsp

example:
http://localhost:8080/fc-webclient-0.3.0-SNAPSHOT/services/ALEWebClient.jsp
+--------------+




* {Set} the connection endpoint

  You need to connect 2 endpoints. One for the "Filtering and Collection API" 
  and the other for the "Logical Reader API":

  Set the endpoint to the Fosstrak fc-server by the method
  "setEndpoint(String endPointName)" in the "Filtering and Collection API". 
  Click "Invoke" to execute the command.
  
+--------------+
endpoint: http://<SERVER>:<PORT>/<FCSERVER_VERSION>/services/ALEService

example: 
http://localhost:8080/fc-server-0.3.0-SNAPSHOT/services/ALEService
+--------------+

  Verify the connection between the webclient and the server by 
  clicking on "getVendorVersion()". A version number should be returned.
  
  Set the endpoint to the Accdada Logical Reader API by the method 
  "setEndPoint(String endPointName)" in the "LogicalReader API).
  Click "Invoke" to execute the command.
  
+--------------+
endpoint: http://<SERVER>:<PORT>/<FCSERVER_VERSION>/services/ALELRService

example: 
http://localhost:8080/fc-server-0.3.0-SNAPSHOT/services/ALELRService
+--------------+

  Verify the connection between the webclient and the server by 
  clicking on "getVendorVersion()". A version number should be returned.
    
* {Install} a logical reader
  
  The next step is to setup a reader. Therefor click on "define(String readerName, LRSpec spec)" 
  in the section LogicalReader API. DO NOT CONFUSE the define method for an EventCycle 
  with the define method for a logical reader! For this tutorial name your reader 
  "LogicalReader1" and use the RPReader.xml as LRSpec.
  
+--------------+
readerName:  <READERNAME>
specFilePath: <PATH_TO_SPEC>\<SPEC_NAME>.xml

example:
readerName: LogicalReader1
specFilePath: c:\epc\RPReader.xml
+--------------+

  Verify that the reader has been created by clicking on "getLogicalReaderNames()".
  The call should return a list of logical readers in brackets. Make sure that 
  your reader is contained in this list.
  
  You can inspect the logical reader specification LRSpec by the method "getLRSpec(String readerName)".
  
  
  
* {Define} an EventCycle
  
  In the next step you will install/define an EventCycle. invoke the method 
  "define(String specName, String specFilePath)". DO NOT CONFUSE the define
  method for an EventCycle with the define method for a logical reader! For this 
  tutorial name your EventCycle "specCURRENT".

+--------------+
specName: <SPEC_NAME>
specFilePath: <PATH_TO_SPEC>\<SPEC_NAME>.xml

example:
specName: specCURRENT
specFilePath: c:\epc\ECSpec_current.xml
+--------------+
  
  Verify the installation of your EventCycle by invoking the method "getECSpecNames()".
  You should get a list of EventCycle names in brackets. Make sure that your 
  EventCycle is contained in this list.

  
  
* {Subscribe} an event sink

  When there is no subscriber for an EventCycle, the EventCycle won't do anything 
  and stay in the idle status. We therefor subscribe our event sink to the 
  EventCycle "specCURRENT".
  
  Invoke "subscribe(String specName, String notificationUri)" and register the 
  event sink.
  
+--------------+
notificationURI: http://<SERVER>:<PORT>
specName: <SPEC_NAME>

example:
notificationURI: http://localhost:9999
specName: specCURRENT
+--------------+

  Now you can place a tag on one of the shelfs in the reader simulator. After 
  a complete run of the EventCycle your tag will appear in the ECReport displayed 
  in the event sink.

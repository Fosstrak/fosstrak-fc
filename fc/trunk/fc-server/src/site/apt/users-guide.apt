       ------
                                    Users guide
                                    ------
                                    ------


Users guide

* Content
	
	[[1]] {{{#Overview}Overview}}
	
	[[2]] {{{#Requirements}Requirements}}
	
	[[3]] {{{#Configuration}Configuration}}
	
	[[4]] {{{#LogicalReaders}LogicalReaders}}
	
	[[5]] {{{#Example 1}Example 1 - A Reader Protocol LogicalReader}}
	
	[[6]] {{{#Example 2}Example 2 - A HAL Protocol LogicalReader}}
	
	[[7]] {{{#Example 3}Example 3 - A Complete Example with a CompositeReader}}

* {Objective}

	This guide shall give a short introduction to the ALE for people that 
	want to try out the Accada ALE.




* {Requirements}

	* {{{http://java.com}Java 1.6}}
	
	* {{{http://tomcat.apache.org}Tomcat 5.5 (or higher)}} or 
		another server for web-services. This guide assumes 
		that you use an Apache Tomcat server.
	
	* {{{http://maven.apache.org}Apache Maven Project}}
	
	
	
	
* {Installation}

	In order to use the Filtering and Collection, you need to checkout a 
	running copy of fc from the accada repository. You need to compile 
	and package the module fc-server. Thatfor run a command shell.
	
+-------------------------------------------------------------------+
under windows:
	cd <PATH_TO_CHECKOUT>\fc\fc-server
	
	mvn compile
	mvn package

under linux/unix:
	cd <PATH_TO_CHECKOUT>/fc/fc-server
	
	mvn compile && mvn package
+-------------------------------------------------------------------+

	When everything went fine you should have a new folder target 
	in the fc-server folder that contains the war-file for the 
	webserver. Make sure that the war file was created.

+-------------------------------------------------------------------+
under windows:
	dir target

under linux/unix:
	ls target
	
example output: fc-server-0.3.0-SNAPSHOT.war
+-------------------------------------------------------------------+

	Copy this war-file into the webapps-folder of your server and 
	start the server. The war-file will be deployed into a new 
	folder.

	Under windows you will usually find the webapps folder inside 
	the tomcat installation directory (c:\Programme\Apache Tomcat 
	\webapps). Under linux/unix this will depend on your 
	distribution. Some possible locations: 
	 
	 	* /var/lib/tomcat/webapps
		
		* /usr/local/lib/tomcat/webapps
		
		
	The fc-server is now ready to be configured at your needs.




* {Configuration}

	This chapter will give a short overview to the configuration 
	files available. These files allow you to adapt the fc-server 
	to your needs. You will find these configuration files inside 
	the folder <TOMCAT_DIRECTORY>/webapps/fc-<VERSION>/WEB-INF/classes.

+-------------------------------------------------------------------+
example: /var/lib/tomcat/webapps/fc-server-0.3.0-SNAPSHOT/WEB-INF/classes
+-------------------------------------------------------------------+
		
	* InputGenerators.properties: This propertie-file is the main 
		config for the Accada ALE. You will find it in the 
		Folder WEB-INF/classes.
		
		It allows only one parameter to be changed, namely 
		the xml-file that provides the logical reader API 
		with the initial readers available at startup.
		
		Sample InputGenerators.properties:
		
+-------------------------------------------------------------------+
# you can specify your initial readers file here
# eg
readerAPI = /LogicalReaders.xml
+-------------------------------------------------------------------+

		Make sure that the specified file is placed into 
		the same folder as InputGenerators.properties. 
		Otherwise your ALE will not startup correctly.
	
	* LogicalReaders.xml: This file specifies the readers that 
		are loaded during startup of the ALE.
		
		Specify your readers according 
		{{{#LogicalReaders}LogicalReaders.xsd}}.
		
	[]
	
	After a restart of the webserver the Accada ALE is available 
	and ready to accept clients.
	
	
	
	
	

* {LogicalReaders}

	LogicalReaders act always either as a connector between software 
	and hardware or as a connector between software and software. Therefor 
	you need some parameters that configure your LogicalReader at 
	your needs. In the following we will give a short introduction 
	how you can setup the basic structure for a LogicalReader. You will 
	find some elaborate Examples for real LogicalReaders later on in this 
	guide (See FIXME FIXME FIXME).

	When you want to define your own LogicalReader through an xml-file 
	you need to obey some restrictions. Some of them are discussed here. 
	
	* The xml has must have a valid encoding and version number

+-------------------------------------------------------------------+
example: <?xml version="1.0" encoding="UTF-8"?>
+-------------------------------------------------------------------+

	* The xml must contain exactly one LogicalReaders tag.
	
+-------------------------------------------------------------------+
example:
	
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
</LogicalReaders>	
+-------------------------------------------------------------------+

	* Whenever you define a LogicalReader you must specify an 
		LRSpec and within that LRSpec you must specify 
		if this reader is composite or not.

+-------------------------------------------------------------------+
example:
	
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
		</LRSpec>
	</LogicalReader>
</LogicalReaders>	
+-------------------------------------------------------------------+
	
		Make sure, that you use the name of a LogicalReader 
		only once. The logical reader API does not allow 
		duplicates of LogicalReaders.

	[]
	
	To check your xml-file for correctness you can use 
	our xsd schema ({{{files/LogicalReaders.xsd}LogicalReaders.xsd}}).



* {Example 1} - A Reader Protocol LogicalReader

	In the Reader Protocol (RP) the reader needs special 
	parameters for the connection between the physical reader 
	and the LogicalReader. For a detailed introduction of these 
	parameters refer to the developers-guide - section 
	{{{adaptor.html}"Implement an Adaptor"}}.
	
	The Example shows the definition of one RP LogicalReader.
	
	You can download the xml {{{files/users-guide-example1.xml}here}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
			<LRProperty name="Description" value="This Logical Reader consists of shelf 1,2,3,4"/>
			<LRProperty name="ConnectionPoint" value="http://localhost:8000"/>
			<LRProperty name="NotificationPoint" value="http://localhost:9090"/>
			<LRProperty name="ReadTimeInterval" value="200"/>
			<LRProperty name="AdaptorClass" value="ReaderProtocol"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.rp.RPAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="PhysicalReaderSource" value="Shelf1,Shelf2,Shelf3,Shelf4"/>
		</LRSpec>
	</LogicalReader>
</LogicalReaders>
+-------------------------------------------------------------------+

* {Example 2} - A HAL Protocol LogicalReader

	In the Hardware Abstraction Layer (HAL) the reader needs special 
	parameters for the bootstrapping of the HAL. For a 
	detailed introduction of these parameters refer to the 
	developers-guide - section {{{adaptor.html}"Implement an Adaptor"}}.
	
	The Example shows the definition of one HAL LogicalReader.
	
	You can download the xml {{{files/users-guide-example2.xml}here}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.hal.HALAdaptor">
			<LRProperty name="Description" value="My first HAL device reader"/>
			<LRProperty name="AdaptorClass" value="HAL"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.hal.HALAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="ReadTimeInterval" value="1000"/>
			<LRProperty name="PropertiesFile" value="/props/SimulatorController.xml"/>
		</LRSpec>
	</LogicalReader>
</LogicalReaders>
+-------------------------------------------------------------------+






* {Example 3} - A Complete Example with a CompositeReader

	The following Example introduces the capability of the 
	logical reader API to combine several readers into one 
	CompositeReader. This CompositeReader then again can be used 
	as a LogicalReader. This even enables that CompositeReaders 
	can be used again in other CompositeReaders.
	
	This Example shows one HAL reader and one RP reader that then will be 
	part of one CompositeReader.
	
	You can download the xml {{{files/users-guide-example3.xml}here}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
			<LRProperty name="Description" value="This Logical Reader consists of shelf 1,2,3,4"/>
			<LRProperty name="ConnectionPoint" value="http://localhost:8000"/>
			<LRProperty name="NotificationPoint" value="http://localhost:9090"/>
			<LRProperty name="ReadTimeInterval" value="200"/>
			<LRProperty name="AdaptorClass" value="ReaderProtocol"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.rp.RPAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="PhysicalReaderSource" value="Shelf1,Shelf2,Shelf3,Shelf4"/>
		</LRSpec>
	</LogicalReader>
	<LogicalReader name="LogicalReader2">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.hal.HALAdaptor">
			<LRProperty name="Description" value="My first HAL device reader"/>
			<LRProperty name="AdaptorClass" value="HAL"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.hal.HALAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="ReadTimeInterval" value="1000"/>
			<LRProperty name="PropertiesFile" value="/props/SimulatorController.xml"/>
		</LRSpec>
	</LogicalReader>
	<LogicalReader name="CompositeReader2">
		<LRSpec isComposite="true" readerType="org.accada.ale.server.readers.CompositeReader">
			<LRProperty name="Description" value="My first composite reader consisting of LogicalReader1 and LogicalReader2"/>
			<readers>LogicalReader1</readers>
			<readers>CompositeReader1</readers>
		</LRSpec>
	</LogicalReader>	
</LogicalReaders>
+-------------------------------------------------------------------+













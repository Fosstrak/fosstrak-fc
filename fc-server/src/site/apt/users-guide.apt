       ------
                                    Users guide
                                    ------
                                    ------


Users guide

* Content
	
	[[1]] {{{#Overview}Overview}}
	
	[[2]] {{{#Requirements}Requirements}}
	
	[[3]] {{{#Configuration}Configuration}}
	
	[[4]] {{{#LogicalReaders}LogicalReaders}}
	
	[[5]] {{{#Example 1}Example 1 - A Reader Protocol LogicalReader}}
	
	[[6]] {{{#Example 2}Example 2 - A HAL Protocol LogicalReader}}
	
	[[7]] {{{#Example 3}Example 3 - A Complete Example with a CompositeReader}}
	
	[[8]] {{{#Clients}Clients}}
	
	[[9]] {{{#ECSpecifications}ECSpecifications}}
	
	[[10]] {{{#Displaying}Displaying reports}}
	
	

* {Objective}

	This guide shall give a short introduction to the ALE for people that 
	want to try out the Accada ALE.




* {Requirements}

	* {{{http://java.com}Java 1.6}}
	
	* {{{http://tomcat.apache.org}Tomcat 5.5 (or higher)}} or 
		another server for web-services. This guide assumes 
		that you use an Apache Tomcat server.
	
	* {{{http://maven.apache.org}Apache Maven Project}}
	
	
	
	
* {Installation}

	In order to use the Filtering and Collection, you need a running 
	copy of the Accada fc-server. There are basically two ways how 
	you can get one:
	 
	* You obtain a checkout from the accada repository. (Where 
	you need to compile the service on your own)
	
	* You can download a running copy from the website. If you 
	prefere this way you can skip the chapter {{{#Compile}Compile}} and jump 
	directly to {{{#Deploy}Deploy}}.
	

** {Compile}
	
	You need a copy of the fc-server sources from the accada 
	svn repository.
	To compirm le the sources run the following command in a shell.
	
+-------------------------------------------------------------------+
under windows:
	cd <PATH_TO_CHECKOUT>\fc\fc-server
	
	mvn compile
	mvn package

under linux/unix:
	cd <PATH_TO_CHECKOUT>/fc/fc-server
	
	mvn compile && mvn package
+-------------------------------------------------------------------+

	When everything went fine you should have a new folder target 
	in the fc-server folder that contains the war-file for the 
	webserver. Make sure that the war file was created.

+-------------------------------------------------------------------+
under windows:
	dir target

under linux/unix:
	ls target
	
example output: fc-server-0.3.0-SNAPSHOT.war
+-------------------------------------------------------------------+

** {Deploy}
	
	Copy the war-file into the webapps-folder of your server and 
	start the server. The war-file will be deployed into a new 
	folder.

	Under windows you will usually find the webapps folder inside 
	the tomcat installation directory (c:\Programme\Apache Tomcat 
	\webapps). Under linux/unix this will depend on your 
	distribution. Some possible locations: 
	 
	 	* /var/lib/tomcat/webapps
		
		* /usr/local/lib/tomcat/webapps
		
		
	The fc-server is now ready to be configured at your needs.




* {Configuration}

	This chapter will give a short overview to the configuration 
	files available. These files allow you to adapt the fc-server 
	to your needs. You will find these configuration files inside 
	the folder <TOMCAT_DIRECTORY>/webapps/fc-<VERSION>/WEB-INF/classes.

+-------------------------------------------------------------------+
example: /var/lib/tomcat/webapps/fc-server-0.3.0-SNAPSHOT/WEB-INF/classes
+-------------------------------------------------------------------+
		
	* InputGenerators.properties: This propertie-file is the main 
		config for the Accada ALE. You will find it in the 
		Folder WEB-INF/classes.
		
		It allows only one parameter to be changed, namely 
		the xml-file that provides the logical reader API 
		with the initial readers available at startup.
		
		Sample InputGenerators.properties:
		
+-------------------------------------------------------------------+
# you can specify your initial readers file here
# eg
readerAPI = /LogicalReaders.xml
+-------------------------------------------------------------------+

		Make sure that the specified file is placed into 
		the same folder as InputGenerators.properties. 
		Otherwise your ALE will not startup correctly.
	
	* LogicalReaders.xml: This file specifies the readers that 
		are loaded during startup of the ALE.
		
		For a short introduction to the parameters you need 
		to specify in the xml refer to {{{#LogicalReaders}LogicalReaders}}.
		
	[]
	
	After a restart of the webserver the Accada ALE is available 
	and ready to accept clients.
	
	
	
	
	

* {LogicalReaders}

	LogicalReaders act always either as a connector between software 
	and hardware or as a connector between software and software. Therefor 
	you need some parameters that configure your LogicalReader at 
	your needs. In the following we will give a short introduction 
	how you can setup the basic structure for a LogicalReader. You will 
	find some elaborate Examples for real LogicalReaders later on in this 
	guide (See {{{#Example 1}Example 1}}, {{{#Example 2}Example 2}}, {{{#Example 3}Example 3}}).

	When you want to define your own LogicalReader through an xml-file 
	you need to obey some restrictions. Some of them are discussed here. 
	
	* The xml has must have a valid encoding and version number

+-------------------------------------------------------------------+
example: <?xml version="1.0" encoding="UTF-8"?>
+-------------------------------------------------------------------+

	* The xml must contain exactly one LogicalReaders tag.
	
+-------------------------------------------------------------------+
example:
	
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
</LogicalReaders>	
+-------------------------------------------------------------------+

	* Whenever you define a LogicalReader you must specify an 
		LRSpec and within that LRSpec you must specify 
		if this reader is composite or not.

+-------------------------------------------------------------------+
example:
	
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
		</LRSpec>
	</LogicalReader>
</LogicalReaders>	
+-------------------------------------------------------------------+
	
		Make sure, that you use the name of a LogicalReader 
		only once. The logical reader API does not allow 
		duplicates of LogicalReaders.

	[]
	
	To check your xml-file for correctness you can use 
	our xsd schema ({{{files/LogicalReaders.xsd}LogicalReaders.xsd}}).



* {Example 1} - A Reader Protocol LogicalReader

	In the Reader Protocol (RP) the reader needs special 
	parameters for the connection between the physical reader 
	and the LogicalReader. For a detailed introduction of these 
	parameters refer to the developers-guide - section 
	{{{adaptor.html}"Implement an Adaptor"}}.
	
	The Example shows the definition of one RP LogicalReader.
	
	You can download the xml {{{files/users-guide-example1.xml}users-guide-example1.xml}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
			<LRProperty name="Description" value="This Logical Reader consists of shelf 1,2,3,4"/>
			<LRProperty name="ConnectionPoint" value="http://localhost:8000"/>
			<LRProperty name="NotificationPoint" value="http://localhost:9090"/>
			<LRProperty name="ReadTimeInterval" value="200"/>
			<LRProperty name="AdaptorClass" value="ReaderProtocol"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.rp.RPAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="PhysicalReaderSource" value="Shelf1,Shelf2,Shelf3,Shelf4"/>
		</LRSpec>
	</LogicalReader>
</LogicalReaders>
+-------------------------------------------------------------------+

* {Example 2} - A HAL Protocol LogicalReader

	In the Hardware Abstraction Layer (HAL) the reader needs special 
	parameters for the bootstrapping of the HAL. For a 
	detailed introduction of these parameters refer to the 
	developers-guide - section {{{adaptor.html}"Implement an Adaptor"}}.
	
	The Example shows the definition of one HAL LogicalReader.
	
	You can download the xml {{{files/users-guide-example2.xml}users-guide-example2.xml}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.hal.HALAdaptor">
			<LRProperty name="Description" value="My first HAL device reader"/>
			<LRProperty name="AdaptorClass" value="HAL"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.hal.HALAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="ReadTimeInterval" value="1000"/>
			<LRProperty name="PropertiesFile" value="/props/SimulatorController.xml"/>
		</LRSpec>
	</LogicalReader>
</LogicalReaders>
+-------------------------------------------------------------------+






* {Example 3} - A Complete Example with a CompositeReader

	The following Example introduces the capability of the 
	logical reader API to combine several readers into one 
	CompositeReader. This CompositeReader then again can be used 
	as a LogicalReader. This even enables that CompositeReaders 
	can be used again in other CompositeReaders.
	
	This Example shows one HAL reader and one RP reader that then will be 
	part of one CompositeReader.
	
	You can download the xml {{{files/users-guide-example3.xml}users-guide-example3.xml}}.
	
+-------------------------------------------------------------------+
<?xml version="1.0" encoding="UTF-8"?>
<LogicalReaders xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/resources/LogicalReaders.xsd">
	<LogicalReader name="LogicalReader1">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.rp.RPAdaptor">
			<LRProperty name="Description" value="This Logical Reader consists of shelf 1,2,3,4"/>
			<LRProperty name="ConnectionPoint" value="http://localhost:8000"/>
			<LRProperty name="NotificationPoint" value="http://localhost:9090"/>
			<LRProperty name="ReadTimeInterval" value="200"/>
			<LRProperty name="AdaptorClass" value="ReaderProtocol"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.rp.RPAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="PhysicalReaderSource" value="Shelf1,Shelf2,Shelf3,Shelf4"/>
		</LRSpec>
	</LogicalReader>
	<LogicalReader name="LogicalReader2">
		<LRSpec isComposite="false" readerType="org.accada.ale.server.readers.hal.HALAdaptor">
			<LRProperty name="Description" value="My first HAL device reader"/>
			<LRProperty name="AdaptorClass" value="HAL"/>
			<LRProperty name="ImplClass" value="org.accada.ale.server.readers.hal.HALAdaptor"/>
			<LRProperty name="PhysicalReaderName" value="MyReader"/>
			<LRProperty name="ReadTimeInterval" value="1000"/>
			<LRProperty name="PropertiesFile" value="/props/SimulatorController.xml"/>
		</LRSpec>
	</LogicalReader>
	<LogicalReader name="CompositeReader2">
		<LRSpec isComposite="true" readerType="org.accada.ale.server.readers.CompositeReader">
			<LRProperty name="Description" value="My first composite reader consisting of LogicalReader1 and LogicalReader2"/>
			<readers>LogicalReader1</readers>
			<readers>CompositeReader1</readers>
		</LRSpec>
	</LogicalReader>	
</LogicalReaders>
+-------------------------------------------------------------------+





* {Clients}

 Accada comes with two different testclients that allow to interactively use a Filtering and
  Collection Server instance. While the first client is a standalone Java application with a
  Swing GUI, the second client is a web application that can be accessed with any web browser.
  
** Standalone Client

  The <<Filtering and Collection Standalone Client>> is a pure Java application. On our {{{../download.html}download page}}
  we provide a ZIP file  with all the necessary libraries included.

  The standalone client is configure through the <<<ALEClient.properties>>> file. To get started quickly, it should 
  be sufficient to adjust the <<<EndPoint>>> option to specify the server to communicate with. All other options
  can be left unchanged initially. After starting the client with the <<<java -jar fc-client<Version>.jar>>> command,
  you will see the following screen:

[images/userGuide/GUIClientBasic.png]

  If the endpoint is not correctly configured an error dialog pops up, informing you that the client couldn't connect
  to the server:

[images/userGuide/GUIClientFailureDialog.png]

  The client's user interface has three sections. Commands can be choosen from a dropdown box in the top section.
  In the middle, parameters for the selected command can be typed in (not all commands need parameters).
  Commands are sent to the server by clicking the the <<<execute>>> button. 
  
[images/userGuide/GUIClientCommando.png]

  The third section is used to display the server's response.

  []

** Web Client

  The <<Filtering and Collection Web Client>> is based on Java Server Pages (JSP). To set it up, you have to get
  the Web Client WAR file from our {{{../download.html}download page}} and simply place it into 
  Tomcat's webapp directory. After restarting Tomcat, the WAR file will be deployed and the Web Client is ready 
  without any need for configuration (for more information about the deployment process, visit this
  {{{http://tomcat.apache.org/tomcat-5.5-doc/manager-howto.html#Deploy%20A%20New%20Application%20Remotely}page}}).
  To access the Web Client, visit the URL <<<http://<hostname>:8080/<WAR-File Name>/services/ALEWebClient.jsp>>>.
  Again, you will see a user interface that is divided into three frames. In the left frame, all methods are listed,
  while the top right one accepts the method arguments and the bottom right frame displays server responses.

[images/userGuide/WebClient.png]

  Before invoking any other methods, you will have to set the endpoint (i.e., the Filtering and Collection Server
  to communicate with) by choosing the <<<setEndpoint() >>> method in left frame and inserts the URL of your
  Filtering and Collection Server in the text field (top right frame). After hitting the <<<Invoke >>> button,
  the endpoint is set. You can use the <<<getVendorVersion() >>> method, to check if communication between the
  Web Client and the server works.

  []


* {ECSpecifications}

	The ECSpecs define how a the Filtering and Collection Server shall generate reports. You can 
	retrieve current tags, tags that have been added or deleted with respect to the last EventCycle or 
	combinations of all. 
	Thatfor you need to provide the Filtering and Collection Server with a valid ECSpec in xml format 
	using one of the two applications (webclient, rp-client). The ECSpec becomes active as soon as 
	you subscribe with a notificationURI.
	
	The following list provides a few sample ECSpecs. For all three examples you need to have a 
	LogicalReader named "LogicalReader1". The Filtering and Collection will restart the EventCycle 
	every 30 seconds (30000ms) and will read tags during 5 seconds (5000ms). Feel free to modify the 
	parameters to your needs. Attention: The readTimeInterval should be smaller than the duration of 
	the EventCycle.
	
	* {{{files/ECSpec_current.xml}ECSpec_current.xml}}: Retrieve all the tags that are currently on 
		the reader.
	
	* {{{files/ECSpec_additions.xml}ECSpec_additions.xml}}: Retrieve all the tags that have been added 
		to the reader since the last EventCycle.
	
	* {{{files/ECSpec_deletions.xml}ECSpec_deletions.xml}}: Retrieve all the tags that have been deleted 
		from the reader since the last EventCycle.
	

	
* {Displaying} reports

   For testing purposes, the class org.accada.reader.rp.client.EventSinkUI from the Accada Reader Client module
   can be used to receive and display reports.

   The following steps show how to install and execute the EventSinkUI class:

   * Download the Reader RP Client binaries with the dependencies included from the {{{../download.html}download}} section of the website.
  
   * Unzip the downloaded file
   
   * Make sure a JRE 1.5 or higher is installed and it is added to the path variable.
   
   * Start the class in the jar file with the following command:
     java -cp reader-rp-client-VERSION.jar org.accada.reader.rp.client.EventSinkUI [port]

   * As the port use the TCP port to which the filtering and collection module is sending the reports.
     The port is specified when subscribing for a specification in the notification URI.
     (e.g. tcp://localhost:9999 as the notification URI). 

  []
	








